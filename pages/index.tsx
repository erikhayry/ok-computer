import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { gql } from "@apollo/client";
import client from "../apollo-client";
import { isDynamicRoute } from 'next/dist/shared/lib/router/utils';
import { number } from 'prop-types';

interface IDay {
  startsAt: string;
  total: number;
}

interface IPeriod {
  startsAt: string;
  total: number;
}

function toPeriod({ startsAt }: IDay, index: number, arr: IDay[]): IPeriod {
  const dayOnePrice = arr[index].total;
  const dayTwoPrice = arr[index + 1]?.total || 10000;
  const dayThreePrice = arr[index + 2]?.total || 10000;
  const startsAtDate = new Date(startsAt);
  const startsAtString = `${startsAtDate.toLocaleDateString()} - ${startsAtDate.toLocaleTimeString()}`;
  const total = (dayOnePrice + dayTwoPrice + dayThreePrice)
  
  return { startsAt: startsAtString, total }
}

const Home: NextPage<{priceInfo: { current: IDay, today: IDay[], tomorrow: IDay[] }, nowDateString: string }> = ({priceInfo : { current, today, tomorrow }, nowDateString}) => {
  const now = current.startsAt;
  const nowIndex = today.findIndex(({ startsAt }) => startsAt === now );
  const todayFromNow = today.slice(nowIndex)
  const threeHours = todayFromNow.concat(tomorrow).map(toPeriod).sort((a, b) => a.total - b.total)

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>BÃ¤sta tre timmar ({nowDateString})</h1>
        {threeHours.slice(0, 5).map(({ startsAt, total }) => {
          return <>
            <h2 key={startsAt}>{startsAt} ({total.toFixed(3)})</h2>
          </>
        })}
      </main>
    </div>
  )
}

export default Home

export async function getStaticProps() {
  const { data } = await client.query({
    query: gql`
      query Viewer {
        viewer {
          homes {
            currentSubscription{
              priceInfo{
                current{
                  total
                  energy
                  tax
                  startsAt
                }
                today {
                  total
                  energy
                  tax
                  startsAt
                }
                tomorrow {
                  total
                  energy
                  tax
                  startsAt
                }
              }
            }
          }
        }
      }
    `,
  });

  const priceInfo = data.viewer.homes[0].currentSubscription.priceInfo
  const nowDateString = `${new Date().toLocaleDateString()} - ${new Date().toLocaleTimeString()}`;

  return {
    props: {priceInfo, nowDateString},
  };
}